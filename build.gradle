/*
 * Copyright 2018, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


buildscript {
    apply from: 'ext.gradle'

    ext {
        spineRepository = 'http://maven.teamdev.com/repository/spine'
        spineSnapshotsRepository = 'http://maven.teamdev.com/repository/spine-snapshots'
    }

    repositories {
        jcenter()

        maven { url = spineRepository }
        maven { url = spineSnapshotsRepository }

        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath group: 'com.google.guava', name: 'guava', version: guavaVersion
        classpath(group: 'com.google.protobuf', name: 'protobuf-gradle-plugin', version: protobufGradlePluginVersion) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
        classpath "org.junit.platform:junit-platform-gradle-plugin:${jUnitPlatformVersion}"
        classpath "io.spine.tools:spine-model-compiler:${spineBaseVersion}"
    }
}

ext {
    credentialsPropertyFile = 'credentials.properties'
    publishPlugin = "$rootDir/scripts/publish.gradle"
    projectsToPublish = ['firebase-mirror']
}

allprojects {
    apply from: "$rootDir/ext.gradle"
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    repositories {
        jcenter()

        maven { url = spineRepository }
        maven { url = spineSnapshotsRepository }

        mavenCentral()
        mavenLocal()
    }

    group = 'io.spine.server'
    version = spineVersion
}

subprojects {
    project.ext {
        sourcesRootDir = "${projectDir}/src"
        generatedRootDir = "${projectDir}/generated"

        generatedJavaDir = "${generatedRootDir}/main/java"
        generatedTestJavaDir = "${generatedRootDir}/test/java"

        generatedGrpcDir = "${generatedRootDir}/main/grpc"
        generatedTestGrpcDir = "${generatedRootDir}/test/grpc"

        generatedSpineDir = "${generatedRootDir}/main/spine"
        generatedTestSpineDir = "${generatedRootDir}/test/spine"
    }

    apply plugin: 'com.google.protobuf'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'io.spine.tools.spine-model-compiler'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compile (group: 'io.spine', name: 'spine-testutil-server', version: spineVersion) {
            exclude group: 'junit'
        }
        compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
        compile group: 'com.google.guava', name: 'guava', version: guavaVersion

        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile("io.spine:spine-testutil-base:${spineBaseVersion}") {
            // We are using JUnit 5.x instead of 4.x dependency of Spine testing framework.
            exclude group: 'junit'
        }
        testCompile("io.spine:spine-testutil-core:${spineVersion}") {
            // We are using JUnit 5.x instead of 4.x dependency of Spine testing framework.
            exclude group: 'junit'
        }
        testCompile("io.spine:spine-testutil-client:${spineVersion}") {
            // We are using JUnit 5.x instead of 4.x dependency of Spine testing framework.
            exclude group: 'junit'
        }
        testCompile("io.spine:spine-testutil-server:${spineVersion}") {
            // We are using JUnit 5.x instead of 4.x dependency of Spine testing framework.
            exclude group: 'junit'
        }
        testCompile "com.google.guava:guava-testlib:$guavaVersion"
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion
        testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
        testRuntime group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion
    }

    sourceSets {
        main {
            proto.srcDirs = ["${sourcesRootDir}/main/proto"]
            java.srcDirs = [generatedJavaDir, generatedSpineDir, "${sourcesRootDir}/main/java"]
            resources.srcDirs = ["${generatedRootDir}/main/resources", "${sourcesRootDir}/main/resources"]
        }
        test {
            proto.srcDirs = ["${sourcesRootDir}/test/proto"]
            java.srcDirs = [generatedTestJavaDir, generatedTestSpineDir, "${sourcesRootDir}/test/java"]
            resources.srcDirs = ["${generatedRootDir}/test/resources", "${sourcesRootDir}/test/resources"]
        }
    }

    idea {
        module {
            sourceDirs += file(generatedJavaDir);
            sourceDirs += file(generatedGrpcDir);
            sourceDirs += file(generatedSpineDir);

            testSourceDirs += file(generatedTestJavaDir)
            testSourceDirs += file(generatedTestGrpcDir)
        }
    }

    idea.module.iml {
        beforeMerged { module ->
            module.dependencies.clear()
        }
        whenMerged { module ->
            module.dependencies*.exported = true
        }
    }

    junitPlatform {
        platformVersion "${jUnitPlatformVersion}"

        logManager 'java.util.logging.LogManager'

        selectors {
            // Add the test selectors as soon as there are any tests in the project.
        }

        filters {
            includeClassNamePatterns '.*Test'
        }
    }

    // This is a workaround to make JUnit 5 work with Jacoco library.
    // There is an open issue here:
    // <link>https://discuss.gradle.org/t/jacocotestreport-task-fails-if-jacoco-plugin-is-applied-in-afterevaluate/835</link>
    // TODO:2018-01-03:dmytro.dashenkov: Revisit the workaround once the issue is resolved.
    project.afterEvaluate {
        def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

        // configure jacoco to analyze the junitPlatformTest task
        jacoco {
            // this tool version is known to be compatible with JUnit 5.
            toolVersion = "0.7.6.201602180812"
            applyTo junitPlatformTestTask
        }

        codeCoverageReport.dependsOn {
            subprojects*.test
        }
    }

    javadoc {
        source = sourceSets.main.allJava
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from ("$projectDir/build/docs/javadoc")
        classifier "javadoc"
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/reports/jacoco/report.xml"
        html.enabled = false
        csv.enabled = false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

apply from: publishPlugin
